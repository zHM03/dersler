import streamlit as st
import pyodbc
import os
from dotenv import load_dotenv
import pandas as pd

from sqlalchemy import create_engine
import urllib
# .env dosyasÄ±nÄ± yÃ¼kle
load_dotenv()

# SQLAlchemy baÄŸlantÄ±sÄ± (read iÅŸlemleri iÃ§in)
def get_connection():
    params = urllib.parse.quote_plus(
        "DRIVER={ODBC Driver 17 for SQL Server};SERVER=DESKTOP-1P0456N;DATABASE=E_Commerce;trusted_connection=yes;"
    )
    return create_engine("mssql+pyodbc:///?odbc_connect=%s" % params)

# PyODBC baÄŸlantÄ±sÄ± (write iÅŸlemleri iÃ§in cursor kullanÄ±mÄ± iÃ§in)
def get_raw_connection():
    return pyodbc.connect("DRIVER={ODBC Driver 17 for SQL Server};SERVER=DESKTOP-1P0456N;DATABASE=E_Commerce;trusted_connection=yes;")

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(page_title="Stok YÃ¶netim Sistemi", page_icon="ðŸ“¦", layout="wide")


# Sidebar menÃ¼
def sidebar():
    with st.sidebar:
        st.image("https://inciflo.com/wp-content/uploads/2024/06/stock-management-system-min.jpg", width=100)
        st.title("Stok YÃ¶netim Sistemi")
        menu = st.radio("MenÃ¼", ["ÃœrÃ¼n YÃ¶netimi", "Kategori YÃ¶netimi", "Stok Hareketleri", "Raporlar"])
        st.markdown("---")
        if st.button("VeritabanÄ±nÄ± Yenile"):
            st.experimental_rerun()
        return menu


# ÃœrÃ¼n YÃ¶netimi SayfasÄ±
def product_management():
    st.header(" ÃœrÃ¼n YÃ¶netimi")
    tab1, tab2, tab3 = st.tabs(["ÃœrÃ¼n Listesi", "Yeni ÃœrÃ¼n Ekle", "ÃœrÃ¼n GÃ¼ncelle"])

    with tab1:
        conn = get_connection()
        products = pd.read_sql("""
            SELECT p.ProductID, p.ProductName, c.CategoryName, p.UnitPrice, p.UnitsInStock
            FROM Products p
            JOIN Categories c ON p.CategoryID = c.CategoryID
            ORDER BY p.ProductName
        """, conn)
        st.dataframe(products, use_container_width=True, hide_index=True,
                     column_config={
                         "ProductID": "ID",
                         "ProductName": "ÃœrÃ¼n AdÄ±",
                         "CategoryName": "Kategori",
                         "UnitPrice": st.column_config.NumberColumn("Fiyat", format="%.2f â‚º"),
                         "UnitsInStock": "Stok"
                     })

    with tab2:
        with st.form("add_product_form"):
            cols = st.columns(2)
            name = cols[0].text_input("ÃœrÃ¼n AdÄ±*")
            category_id = cols[1].number_input("Kategori ID*", min_value=1, step=1)
            cols = st.columns(2)
            price = cols[0].number_input("Fiyat*", min_value=0.0, step=0.1, format="%.2f")
            stock = cols[1].number_input("BaÅŸlangÄ±Ã§ Stok*", min_value=0, step=1)
            if st.form_submit_button("ÃœrÃ¼n Ekle"):
                if name and category_id and price is not None:
                    conn = get_raw_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO Products (ProductName, CategoryID, UnitPrice, UnitsInStock)
                        VALUES (?, ?, ?, ?)
                    """, name, category_id, price, stock)
                    conn.commit()
                    conn.close()
                    st.success("ÃœrÃ¼n baÅŸarÄ±yla eklendi!")
                    st.rerun()
                else:
                    st.error("LÃ¼tfen zorunlu alanlarÄ± doldurun (*)")

    with tab3:
        conn = get_connection()
        active_products = pd.read_sql("SELECT ProductID, ProductName FROM Products", conn)
        if not active_products.empty:
            selected_product = st.selectbox(
                "GÃ¼ncellenecek ÃœrÃ¼n",
                active_products.apply(lambda x: f"{x['ProductID']} - {x['ProductName']}", axis=1))
            product_id = int(selected_product.split(" - ")[0])
            product_info = pd.read_sql(f"SELECT * FROM Products WHERE ProductID = {product_id}", conn).iloc[0]

            with st.form("update_product_form"):
                new_name = st.text_input("ÃœrÃ¼n AdÄ±", value=product_info['ProductName'])
                cols = st.columns(2)
                new_price = cols[0].number_input("Fiyat", value=float(product_info['UnitPrice']))
                new_category = cols[1].number_input("Kategori ID", value=product_info['CategoryID'])
                discontinued = st.checkbox("Ãœretimden KaldÄ±r", value=bool(product_info['Discontinued']))

                if st.form_submit_button("GÃ¼ncelle"):
                    conn = get_raw_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        UPDATE Products
                        SET ProductName = ?, UnitPrice = ?, CategoryID = ?, Discontinued = ?
                        WHERE ProductID = ?
                    """, new_name, new_price, new_category, discontinued, product_id)
                    conn.commit()
                    conn.close()
                    st.success("ÃœrÃ¼n baÅŸarÄ±yla gÃ¼ncellendi!")
                    st.rerun()
        else:
            st.warning("GÃ¼ncellenecek aktif Ã¼rÃ¼n bulunamadÄ±")


# Kategori YÃ¶netimi SayfasÄ±
def category_management():
    st.header(" Kategori YÃ¶netimi")
    tab1, tab2 = st.tabs(["Kategori Listesi", "Yeni Kategori Ekle"])
    with tab1:
        conn = get_raw_connection()
        categories = pd.read_sql(
            "SELECT CategoryID, CategoryName, Description FROM Categories",
            conn)
        #conn.close()
        st.dataframe(categories,
                     use_container_width=True,
                     hide_index=True,
                     column_config={
                         "CategoryID": "ID",
                         "CategoryName": "Kategori AdÄ±",
                         "Description": "AÃ§Ä±klama"
                     })
    with tab2:
        with st.form("add_category_form"):
            name = st.text_input("Kategori AdÄ±*")
            description = st.text_area("AÃ§Ä±klama")
            if st.form_submit_button("Kategori Ekle"):
                if name:
                    conn = get_raw_connection()
                    cursor = conn.cursor()
                    cursor.execute(
                        "INSERT INTO Categories (CategoryName, Description) VALUES (?, ?)",
                        name, description if description else None)
                    conn.commit()
                    #conn.close()
                    st.success("Kategori baÅŸarÄ±yla eklendi!")
                    st.rerun()
                else:
                    st.error("LÃ¼tfen kategori adÄ±nÄ± girin")


# Stok Hareketleri SayfasÄ±
def stock_transactions():
    st.header(" Stok Hareketleri")
    tab1, tab2, tab3 = st.tabs(
        ["Stok GiriÅŸi", "Stok Ã‡Ä±kÄ±ÅŸÄ±", "Hareket GeÃ§miÅŸi"])
    with tab1:
        with st.form("stock_in_form"):
            conn = get_raw_connection()
            products = pd.read_sql(
                "SELECT ProductID, ProductName FROM Products",
                conn)
            #conn.close()
            selected_product = st.selectbox(
                "ÃœrÃ¼n",
                products.apply(
                    lambda x: f"{x['ProductID']} - {x['ProductName']}",
                    axis=1))
            product_id = int(selected_product.split("-")[0])
            quantity = st.number_input("Miktar", min_value=1, step=1)
            notes = st.text_area("Notlar")
            if st.form_submit_button("Stok GiriÅŸi Yap"):
                conn = get_raw_connection()
                cursor = conn.cursor()
                cursor.execute("{CALL sp_AddStock(?, ?, ?)}", product_id,
                               quantity, notes if notes else None)
                conn.commit()
                #conn.close()
                st.success("Stok giriÅŸi baÅŸarÄ±yla kaydedildi!")
                st.rerun()
    with tab2:
        with st.form("stock_out_form"):
            conn = get_connection()
            products = pd.read_sql(
                """
            SELECT p.ProductID, p.ProductName
            FROM Products p
            WHERE p.Discontinued = 0 AND p.UnitsInStock > 0
            """, conn)
            #conn.close()
            if not products.empty:
                selected_product = st.selectbox(
                    "ÃœrÃ¼n",
                    products.apply(
                        lambda x: f"{x['ProductID']} - {x['ProductName']}",
                        axis=1))
                product_id = int(selected_product.split(" - ")[0])
                quantity = st.number_input("Miktar", min_value=1, step=1)
                notes = st.text_area("Notlar")
                if st.form_submit_button("Stok Ã‡Ä±kÄ±ÅŸÄ± Yap"):
                    conn = get_connection()
                    cursor = conn.cursor()
                    try:
                        cursor.execute("{CALL sp_RemoveStock(?, ?, ?)}",
                                       product_id, quantity,
                                       notes if notes else None)
                        conn.commit()
                        st.success("Stok Ã§Ä±kÄ±ÅŸÄ± baÅŸarÄ±yla kaydedildi!")
                        st.experimental_rerun()
                    except Exception as e:
                        st.error(f"Hata: {str(e)}")

                else:
                    st.warning("StoÄŸu olan aktif Ã¼rÃ¼n bulunamadÄ±")
    with tab3:
        conn = get_raw_connection()
        products = pd.read_sql("SELECT ProductID, ProductName FROM Products",
                               conn)
        #conn.close()
        selected_product = st.selectbox(
            "ÃœrÃ¼n SeÃ§in",
            products.apply(lambda x: f"{x['ProductID']} - {x['ProductName']}",
                           axis=1))
        product_id = int(selected_product.split(" - ")[0])
        conn = get_raw_connection()
        history = pd.read_sql(
            f"{{CALL sp_GetProductStockHistory({product_id})}}", conn)
        #conn.close()
        if not history.empty:
            history['TransactionDate'] = pd.to_datetime(
                history['TransactionDate']).dt.strftime('%d.%m.%Y %H:%M')
            st.dataframe(history,
                         use_container_width=True,
                         hide_index=True,
                         column_config={
                             "TransactionID": "ID",
                             "TransactionType": "Hareket TÃ¼rÃ¼",
                             "Quantity": "Miktar",
                             "TransactionDate": "Tarih",
                             "Notes": "Notlar"
                         })
        else:
            st.info("Bu Ã¼rÃ¼ne ait stok hareketi bulunamadÄ±")


# Raporlar SayfasÄ±
def reports():
    st.header(" Raporlar")
    tab1, tab2 = st.tabs(["ÃœrÃ¼n DetaylarÄ±", "Stok DeÄŸeri"])
    with tab1:
        conn = get_connection()
        product_details = pd.read_sql("SELECT * FROM vw_ProductDetails", conn)
        #conn.close()
        st.dataframe(product_details,
                     use_container_width=True,
                     hide_index=True,
                     column_config={
                         "ProductID":
                         "ID",
                         "ProductName":
                         "ÃœrÃ¼n AdÄ±",
                         "CategoryName":
                         "Kategori",
                         "UnitPrice":
                         st.column_config.NumberColumn("Fiyat",
                                                       format="%.2f â‚º"),
                         "UnitsInStock":
                         "Stok",
                         "SupplierCount":
                         "TedarikÃ§i SayÄ±sÄ±"
                     })
    with tab2:
        conn = get_connection()
        categories = pd.read_sql(
            "SELECT CategoryID, CategoryName FROM Categories", conn)
        #conn.close()
        selected_category = st.selectbox(
            "Kategori SeÃ§in (TÃ¼mÃ¼ iÃ§in boÅŸ bÄ±rakÄ±n)",
            ["TÃ¼m Kategoriler"] + categories.apply(
                lambda x: f"{x['CategoryID']} - {x['CategoryName']}",
                axis=1).tolist())
        if selected_category == "TÃ¼m Kategoriler":
            category_id = None
        else:
            category_id = int(selected_category.split(" - ")[0])
            conn = get_connection()
        if category_id:
            inventory_value = pd.read_sql(
                f"SELECT dbo.fn_CalculateInventoryValue({category_id}) AS InventoryValue",
                conn)
            category_name = categories[categories['CategoryID'] ==
                                       category_id]['CategoryName'].values[0]
            st.metric(f"{category_name} Kategorisi Toplam Stok DeÄŸeri",
                      f"{inventory_value.iloc[0]['InventoryValue']:,.2f} â‚º")
        else:
            inventory_value = pd.read_sql(
                "SELECT dbo.fn_CalculateInventoryValue(NULL) AS InventoryValue",
                conn)
            st.metric("Toplam Stok DeÄŸeri",
                      f"{inventory_value.iloc[0]['InventoryValue']:,.2f} â‚º")
            # Kategorilere gÃ¶re stok deÄŸeri grafiÄŸi
            category_values = pd.read_sql(
                """
            SELECT c.CategoryName, SUM(p.UnitPrice * p.UnitsInStock) AS TotalValue
            FROM Products p
            JOIN Categories c ON p.CategoryID = c.CategoryID
            WHERE p.Discontinued = 0
            GROUP BY c.CategoryName
            ORDER BY TotalValue DESC
            """, conn)
            #conn.close()
            if not category_values.empty:
                st.bar_chart(category_values.set_index('CategoryName'),
                             use_container_width=True)


# Ana Uygulama
def main():
    menu = sidebar()
    if menu == "ÃœrÃ¼n YÃ¶netimi":
        product_management()
    elif menu == "Kategori YÃ¶netimi":
        category_management()
    elif menu == "Stok Hareketleri":
        stock_transactions()
    elif menu == "Raporlar":
        reports()


if __name__ == "__main__":
    main()
